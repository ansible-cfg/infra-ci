---
- hosts: subnet

  vars:
    v4_default_rules:
      001 default policies:
        - -P INPUT ACCEPT
        - -P OUTPUT ACCEPT
        - -P FORWARD DROP
      002 allow loopback:
        - -A INPUT -i lo -j ACCEPT
      003 allow ping replies:
        - -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
        - -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
      100 allow established related:
        - -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
      200 allow ssh limiting brute force:
        - -I INPUT -p tcp -d {{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} --dport 22 -m state --state NEW -m recent --set
        - -I INPUT -p tcp -d {{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }} --dport 22 -m state --state NEW -m recent --update --seconds 60 --hitcount 4 -j DROP
      999 drop everything:
        - -P INPUT DROP

  tasks:
    - name: Retrieve v4 rules
      command: iptables -nL
      changed_when: false
      register: v4_rules

    - name: Debug v4 rules
      debug:
        msg: "{{ v4_rules.stdout_lines }}"

    - name: Collect ip address
      debug:
        msg: "{{ allips }}"
      vars:
        - allips: |
                    {% set comma = joiner(",") %}
                    {% for host in groups['subnet'] -%}
                      {{ comma() }}{{ hostvars[host]['ansible_eth0']['ipv4']['address']}}
                    {%- endfor -%}

    - name: Collect ip address 2
      debug:
        var: ips
      vars:
        ips: |
                {{ groups['subnet'] 
                  | map('extract', hostvars, 'ansible_eth0') 
                  | map(attribute='ipv4') 
                  | map(attribute='address') 
                  | list }}


#    - include_role: 
#        name: my_iptables
#      vars:
#        v4_configure: true
#        v4_persist: false
#        v4_group_rules:
#          {% for host in groups['subnet'] %}
#             {{ hostvars[host]['ansible_eth0']['ipv4']['address'] }}
#          {% endfor %}








